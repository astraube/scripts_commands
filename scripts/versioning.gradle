/**
 * Created on 6/3/2018
 * @author Andre Straube
 */

/*
// Outra forma de executar commandos git em lote
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
*/

def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("GMT-3"))
def gitLastTag = "git describe --tags --abbrev=0".execute([], project.rootDir).text.trim()
def gitBranchName = "git rev-parse --abbrev-ref HEAD".execute([], project.rootDir).text.trim()
def gitSha = "git rev-parse --short HEAD".execute([], project.rootDir).text.trim()
def gitCommitCount = "git rev-list --count HEAD".execute([], project.rootDir).text.trim()

// Inserir variaveis no objeto "ext" para obter os valores nos demais arquivos "*.gradle"
ext {
    verConsts = [:]
    verConsts['buildTime'] = buildTime
    //Get the last tag
    verConsts['gitLastTag'] = gitLastTag
    // Get the current branch
    verConsts['gitBranchName'] = gitBranchName
    // Get the sha by branch
    verConsts['gitSha'] = gitSha
    // Get the count all commits
    verConsts['gitCommitCount'] = Integer.parseInt(gitCommitCount)
}

/**
 * use in command line:
 * gradlew showVersion
 */
void showVersion() {
    //generateGitVars()
    // Use inherited method
    println '---> Build Time: ' + verConsts['buildTime']
    println '---> Current Branch: ' + verConsts['gitBranchName']
    println '---> Commit Sha: ' + verConsts['gitSha']
    println '---> Commit Count: ' + verConsts['gitCommitCount']
    println '---> Last Tag: ' + verConsts['gitLastTag']
}

String generateChangelog() {
    println "Generating changelog..."
    //Get the last tag
    def lastTag = verConsts['gitLastTag']

    //Get all the commits since the last tag
    def gitLogCmd = "git log $lastTag..HEAD --oneline --no-merges --pretty=format:\"%s\"".execute([], project.rootDir).text.trim()

    //Loop each line of the commits to build your changelog
    def changelog = "\""

    gitLogCmd.eachLine { line ->
        def escapedLine = line

        //Remove surrounding quotation marks generated by the git log command
        if (escapedLine.charAt(0) == "\"") {
            escapedLine = escapedLine.substring(1, line.length())
        }
        if (escapedLine.charAt(escapedLine.length() - 1) == "\"") {
            escapedLine = escapedLine.substring(0, line.length() - 1)
        }

        //Escape backslashes
        escapedLine = escapedLine.replaceAll(/(\\)/, "\\/")
        //Escape quotation marks
        escapedLine = escapedLine.replaceAll('"', '\\\\"')
        //Add each item to the changelog as a bullet point
        changelog += "â€¢ $escapedLine \\n"
    }
    //Close the changelog string
    changelog = (changelog + "\"").trim()

    //Useful log so you can see what was generated in the Gradle output
    println "Changelog generated, $changelog, from $lastTag to now."
    return changelog
}

/**
 * use in command line:
 * gradlew showVersionGit
 */
task showVersionGit() {
    showVersion()

    def newTagName = "${versionNameDef}"
    def newTagDescription = "${versionNameDef}-${gitBranchName}"
    println '---> New Tag: ' + newTagName
    println '---> New Tag Description: ' + newTagDescription

    if (gitLastTag == newTagName) {
        println ''
        println '------------> Modifique corretamente a variavel "buildVersion" no "build.gradle" do app!  <------------'
        println ''
        return null
    }

    if (gitBranchName != "develop" && gitBranchName != "master") {
        println ''
        println '------------> Apenas com as branchs "develop" ou "master" para criar tags de versao <------------'
        println ''
        return null
    }

    generateChangelog()

    println "Generating new tag..."

    def gitStatus = 'git status -s'.execute([], project.rootDir).text.trim()
    if (gitStatus == null || gitStatus == "") {
        println "-----> Execute os comandos para criar a TAG <-----"
        println "git tag -a ${newTagName} -m '${newTagDescription}'"
        println "git push origin --tags"
        println "git tag"
        return newTagName
    }
    println '------------> Voce precisa commitar suas ultimas modificacoes <------------'
    return null
}